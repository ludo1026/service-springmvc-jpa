#set( $tools = $loader.newInstance("Tools") )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $fieldsLink = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder(${SRC})};

import org.modelmapper.ModelMapper;
import org.modelmapper.PropertyMap;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import ${ENTITY_PKG}.${entity.name};
#foreach( $link in $entity.selectedLinks )
import ${ENTITY_PKG}.${link.targetEntityType};
#end
import ${ENTITY_PKG}.jpa.${entity.name}Entity;
#foreach( $link in $entity.selectedLinks )
import ${ENTITY_PKG}.jpa.${link.targetEntityType}Entity;
#end

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class ${entity.name}ServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public ${entity.name}ServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	public ${entity.name} map${entity.name}EntityTo${entity.name}(${entity.name}Entity ${tools.uncapitalize(${entity.name})}Entity) {
		if(${tools.uncapitalize(${entity.name})}Entity == null) {
			return null;
		}
		${entity.name} ${tools.uncapitalize(${entity.name})} = map(${tools.uncapitalize(${entity.name})}Entity, ${entity.name}.class);
#foreach( $link in $entity.selectedLinks )
#set( $fieldsMappingForLink = $tools.fieldsMappingForLink( $entity, $model.getEntityByClassName($link.targetEntityType), $link, $fieldsLink ) )
#foreach( $fieldMappingForLink in $fieldsMappingForLink.entrySet() )

		if(${tools.uncapitalize(${entity.name})}Entity.${link.getter}() != null) {
			${tools.uncapitalize(${entity.name})}.${fieldMappingForLink.key.setter}(${tools.uncapitalize(${entity.name})}Entity.${link.getter}().${fieldMappingForLink.value.getter}());
		}
#end
#end

		return ${tools.uncapitalize(${entity.name})};
	}
	
	public void map${entity.name}To${entity.name}Entity(${entity.name} ${tools.uncapitalize(${entity.name})}, ${entity.name}Entity ${tools.uncapitalize(${entity.name})}Entity) {
		if(${tools.uncapitalize(${entity.name})} == null) {
			return;
		}
		map(${tools.uncapitalize(${entity.name})}, ${tools.uncapitalize(${entity.name})}Entity);
#foreach( $link in $entity.selectedLinks )
#set( $fieldsMappingForLink = $tools.fieldsMappingForLink( $entity, $model.getEntityByClassName($link.targetEntityType), $link, $fieldsLink ) )
#foreach( $fieldMappingForLink in $fieldsMappingForLink.entrySet() )

		if(${tools.uncapitalize(${entity.name})}.${fieldMappingForLink.key.getter}() == null) {
			${tools.uncapitalize(${entity.name})}Entity.${link.setter}(null);
		} else {
			${tools.uncapitalize(${entity.name})}Entity.${link.setter}(new ${link.targetEntityType}Entity());
			${tools.uncapitalize(${entity.name})}Entity.${link.getter}().${fieldMappingForLink.value.setter}(${tools.uncapitalize(${entity.name})}.${fieldMappingForLink.key.getter}());
		}
#end
#end
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

}
