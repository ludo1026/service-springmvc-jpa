/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder(${SRC})};

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import ${ENTITY_PKG}.${entity.name};
import ${ENTITY_PKG}.jpa.${entity.name}Entity;
#if( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.jpa.${entity.name}EntityKey;
#end
#foreach( $import in $java.imports($entity) )
import $import;
#end
import ${ROOT_PKG}.business.service.${entity.name}Service;
import ${ROOT_PKG}.business.service.mapping.${entity.name}ServiceMapper;
import ${ROOT_PKG}.persistence.PersistenceServiceProvider;
import ${ROOT_PKG}.persistence.services.${entity.name}Persistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of ${entity.name}Service
 */
@Component
public class ${entity.name}ServiceImpl implements ${entity.name}Service {

	private ${entity.name}Persistence ${entity.name.toLowerCase()}Persistence;

	@Resource
	private ${entity.name}ServiceMapper ${entity.name.toLowerCase()}ServiceMapper;
	
	public ${entity.name}ServiceImpl() {
		${entity.name.toLowerCase()}Persistence = PersistenceServiceProvider.getService(${entity.name}Persistence.class);
	}
		
	@Override
	public ${entity.name} findById($fn.argumentsListWithType($entity.keyAttributes)) {
		${entity.name}Entity entity = ${entity.name.toLowerCase()}Persistence.load($fn.argumentsList($entity.keyAttributes));
		return ${entity.name.toLowerCase()}ServiceMapper.map${entity.name}EntityTo${entity.name}(entity);
	}

	@Override
	public List<${entity.name}> findAll() {
		List<${entity.name}Entity> entities = ${entity.name.toLowerCase()}Persistence.loadAll();
		List<${entity.name}> beans = new ArrayList<${entity.name}>();
		for(${entity.name}Entity entity : entities) {
			beans.add(${entity.name.toLowerCase()}ServiceMapper.map${entity.name}EntityTo${entity.name}(entity));
		}
		return beans;
	}

	@Override
	public ${entity.name} save(${entity.name} ${entity.name.toLowerCase()}) {
		return update(${entity.name.toLowerCase()}) ;
	}

	@Override
	public ${entity.name} create(${entity.name} ${entity.name.toLowerCase()}) {
		if(bookPersistence.load(${entity.name.toLowerCase()}.$fn.argumentsListWithGetter(${entity.name.toLowerCase()},$entity.keyAttributes)()) != null) {
			throw new IllegalStateException("already.exists");
		}
		${entity.name}Entity ${entity.name.toLowerCase()}Entity = new ${entity.name}Entity();
		${entity.name.toLowerCase()}ServiceMapper.map${entity.name}To${entity.name}Entity(${entity.name.toLowerCase()}, ${entity.name.toLowerCase()}Entity);
		${entity.name}Entity ${entity.name.toLowerCase()}EntitySaved = ${entity.name.toLowerCase()}Persistence.save(${entity.name.toLowerCase()}Entity);
		return ${entity.name.toLowerCase()}ServiceMapper.map${entity.name}EntityTo${entity.name}(${entity.name.toLowerCase()}EntitySaved);
	}

	@Override
	public ${entity.name} update(${entity.name} ${entity.name.toLowerCase()}) {
		${entity.name}Entity ${entity.name.toLowerCase()}Entity = ${entity.name.toLowerCase()}Persistence.load($fn.argumentsListWithGetter(${entity.name.toLowerCase()},$entity.keyAttributes));
		${entity.name.toLowerCase()}ServiceMapper.map${entity.name}To${entity.name}Entity(${entity.name.toLowerCase()}, ${entity.name.toLowerCase()}Entity);
		${entity.name}Entity ${entity.name.toLowerCase()}EntitySaved = ${entity.name.toLowerCase()}Persistence.save(${entity.name.toLowerCase()}Entity);
		return ${entity.name.toLowerCase()}ServiceMapper.map${entity.name}EntityTo${entity.name}(${entity.name.toLowerCase()}EntitySaved);
	}

	@Override
	public void delete($fn.argumentsListWithType($entity.keyAttributes)) {
		${entity.name.toLowerCase()}Persistence.delete($fn.argumentsList($entity.keyAttributes));
	}

	public ${entity.name}Persistence get${entity.name}Persistence() {
		return ${entity.name.toLowerCase()}Persistence;
	}

	public void set${entity.name}Persistence(${entity.name}Persistence ${entity.name.toLowerCase()}Persistence) {
		this.${entity.name.toLowerCase()}Persistence = ${entity.name.toLowerCase()}Persistence;
	}

	public ${entity.name}ServiceMapper get${entity.name}ServiceMapper() {
		return ${entity.name.toLowerCase()}ServiceMapper;
	}

	public void set${entity.name}ServiceMapper(${entity.name}ServiceMapper ${entity.name.toLowerCase()}ServiceMapper) {
		this.${entity.name.toLowerCase()}ServiceMapper = ${entity.name.toLowerCase()}ServiceMapper;
	}

}
